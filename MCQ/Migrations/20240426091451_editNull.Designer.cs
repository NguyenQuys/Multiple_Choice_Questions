// <auto-generated />
using System;
using MCQ.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MCQ.Migrations
{
    [DbContext(typeof(McqContext))]
    [Migration("20240426091451_editNull")]
    partial class editNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MCQ.Models.Admin", b =>
                {
                    b.Property<string>("IdAdmin")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Admin");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Admin_Name");

                    b.Property<string>("IdRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Role");

                    b.Property<decimal>("PhoneNumber")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("Phone_Number");

                    b.HasKey("IdAdmin");

                    b.HasIndex(new[] { "IdRole" }, "IX_Admin_ID_Role");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Answer", b =>
                {
                    b.Property<string>("IdAnswer")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IdAnswer");

                    b.Property<string>("AnswerTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Answer_Title");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasColumnName("IdQuestion");

                    b.Property<bool>("Key")
                        .HasColumnType("bit");

                    b.HasKey("IdAnswer");

                    b.HasIndex(new[] { "IdQuestion" }, "IX_Answer_IdQuestion");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasColumnName("IdQuestion");

                    b.Property<string>("IdSubject")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IdSubject");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdQuestion");

                    b.HasIndex(new[] { "IdSubject" }, "IX_Question_IdSubject");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Role", b =>
                {
                    b.Property<string>("IdRole")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Role");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Role_Name");

                    b.HasKey("IdRole");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Student", b =>
                {
                    b.Property<string>("IdStudent")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Student");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<string>("IdRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Role");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_Name");

                    b.HasKey("IdStudent");

                    b.HasIndex(new[] { "IdRole" }, "IX_Student_ID_Role");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.StudentAnswer", b =>
                {
                    b.Property<string>("IdStudentAnswer")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID_Student_Answer");

                    b.Property<string>("IdStudent")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Student");

                    b.Property<string>("IdAnswer")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IdAnswer");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasColumnName("IdQuestion");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("IdStudentAnswer");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Student_Answer", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Subject", b =>
                {
                    b.Property<string>("IdSubject")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IdSubject");

                    b.Property<int>("AmountQuestionLevel1")
                        .HasColumnType("int");

                    b.Property<int>("AmountQuestionLevel2")
                        .HasColumnType("int");

                    b.Property<int>("AmountQuestionLevel3")
                        .HasColumnType("int");

                    b.Property<int>("MinCorrectAnswerLevel1")
                        .HasColumnType("int");

                    b.Property<int>("MinCorrectAnswerLevel2")
                        .HasColumnType("int");

                    b.Property<int>("MinCorrectAnswerLevel3")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSubject");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Teacher", b =>
                {
                    b.Property<string>("IdTeacher")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Teacher");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<string>("IdRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_Role");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Phone_Number");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Teacher_Name");

                    b.HasKey("IdTeacher");

                    b.HasIndex(new[] { "IdRole" }, "IX_Teacher_ID_Role");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("MCQ.Models.Admin", b =>
                {
                    b.HasOne("MCQ.Models.Role", "IdRoleNavigation")
                        .WithMany("Admins")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Admin_Role");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("MCQ.Models.Answer", b =>
                {
                    b.HasOne("MCQ.Models.Question", "IdQuestionNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdQuestion")
                        .IsRequired()
                        .HasConstraintName("FK_Answer_Question");

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("MCQ.Models.Question", b =>
                {
                    b.HasOne("MCQ.Models.Subject", "IdSubjectNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("IdSubject")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Subject");

                    b.Navigation("IdSubjectNavigation");
                });

            modelBuilder.Entity("MCQ.Models.Student", b =>
                {
                    b.HasOne("MCQ.Models.Role", "IdRoleNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Role");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("MCQ.Models.StudentAnswer", b =>
                {
                    b.HasOne("MCQ.Models.Student", "IdStudentNavigation")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("IdStudent")
                        .HasConstraintName("FK_Student_Answer_Student");

                    b.HasOne("MCQ.Models.Answer", "IdAnswerNavigation")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("IdAnswer")
                        .HasConstraintName("FK_Student_Answer_Answer");

                    b.HasOne("MCQ.Models.Question", "IdQuestionNavigation")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("IdQuestion")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Answer_Question");

                    b.Navigation("IdStudentNavigation");

                    b.Navigation("IdAnswerNavigation");

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("MCQ.Models.Teacher", b =>
                {
                    b.HasOne("MCQ.Models.Role", "IdRoleNavigation")
                        .WithMany("Teachers")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Teacher_Role");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("MCQ.Models.Answer", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("MCQ.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("MCQ.Models.Role", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MCQ.Models.Student", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("MCQ.Models.Subject", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
